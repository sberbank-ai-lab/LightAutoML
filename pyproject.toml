[tool.poetry]
name = "LightAutoML"
version = "0.3.3"
description = "Fast and customizable framework for automatic ML model creation (AutoML)"
authors = [
    "Alexander Ryzhkov <AMRyzhkov@sberbank.ru>",
    "Anton Vakhrushev <AGVakhrushev@sberbank.ru>",
    "Dmitrii Simakov <Simakov.D.E@sberbank.ru>",
    "Rinchin Damdinov <RGDamdinov@sberbank.ru>",
    "Alexander Kirilin <ADKirilin@sberbank.ru>",
    "Vasilii Bunakov <VABunakov@sberbank.ru>",
    "Pavel Shvets <PIShvets@sberbank.ru>",
]
readme = "README.md"
license = "Apache-2.0"
homepage = "https://lightautoml.readthedocs.io/en/latest/"
repository = "https://github.com/sberbank-ai-lab/LightAutoML"
classifiers = [
    "Programming Language :: Python :: 3.6",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Operating System :: OS Independent",
    "Intended Audience :: Science/Research",
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "Natural Language :: Russian",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Typing :: Typed"
]


[tool.poetry.dependencies]
python = ">=3.6.1, <3.10"

poetry-core = "^1.0.0"
numpy = [
  {version = ">=1.20.0", python = ">=3.7"},
  {version = ">=1.11.1;<1.20.0", python = "<3.7"}
]
scipy = "*"
pandas = ">=1"
scikit-learn = ">=0.22"
lightgbm = "^2.3"
catboost = "*"
optuna = "*"
torch = [
    {platform = "win32", python = "3.6.1", version = "1.7.0"},
    {platform = "*", version = "<1.9"}
]
dataclasses = "0.6"
holidays = "*"
networkx = "*"
cmaes = "*"
pyyaml = "*"
tqdm = "*"
joblib = "*"
importlib-metadata = {version = "^1.0", python = "<3.8"}

autowoe = ">=1.2"

jinja2 = "*"
json2html = "*"
seaborn = "*"

# NLP
gensim = {version = ">=4", optional = true}
nltk = {version = "*", optional = true}
transformers = {version = ">=4", optional = true}

# CV
albumentations = {version = ">=0.4.6", optional = true}  #
efficientnet-pytorch = {version = "*", optional = true}
opencv-python = {version = "==4.5.2.52", optional = true}
PyWavelets = {version = "*", optional = true}
scikit-image = {version = "*", optional = true}
torchvision = [
    {platform = "win32", python = "3.6.1", version = "0.8.0", optional = true},
    {platform = "*", version = "*", optional = true}
]

# Report (pdf)
weasyprint = {version = "^52.5", optional = true}
cffi = {version = "^1.14.5", optional = true}


[tool.poetry.dev-dependencies]
pytest = "*"
sphinx = "*"
sphinx-rtd-theme = "*"
IPython = "*"
nbsphinx = "*"
nbsphinx-link = "*"
sphinx-autodoc-typehints = "*"
pandoc = "*"
pre-commit = "2.15.0"
notebook = "*"
mypy = "^0.910"
tox = "*"
darglint = "^1.8.1"
black = "20.8b1"
flake8-docstrings = "^1.6.0"
isort = "5.7.0"
jupyter-contrib-nbextensions = "^0.5.1"
flake8 = "^4.0.1"


[tool.poetry.extras]
cv = [
    "albumentations",
    "efficientnet-pytorch",
    "opencv-python",
    "PyWavelets",
    "scikit-image",
    "torchvision"
]
nlp = [
    "gensim",
    "nltk",
    "transformers"
]
report = [
    "cffi",
    "weasyprint"
]
all = [
    "albumentations",
    "efficientnet-pytorch",
    "opencv-python",
    "PyWavelets",
    "scikit-image",
    "torchvision",
    "gensim",
    "nltk",
    "transformers",
    "cffi",
    "weasyprint"
]


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"


[tool.black]
line-length = 120
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | tests/.*/setup.py
)/
'''


[tool.isort]
profile = "black"
force_single_line = true
atomic = true
include_trailing_comma = true
lines_after_imports = 2
lines_between_types = 1
use_parentheses = true
filter_files = true


[tool.tox]
legacy_tox_ini = """
[tox]
isolated_build = True
envlist = py{36, 37, 38, 39}

[gh-actions]
python =
    3.6: py36
    3.7: py37
    3.8: py38
    3.9: py39

[gh-actions:env]
PLATFORM =
    ubuntu-latest: linux
    macos-latest: macos
    windows-latest: windows

[testenv]
whitelist_externals = poetry
commands =
    poetry install
    poetry run pytest tests -v
"""
